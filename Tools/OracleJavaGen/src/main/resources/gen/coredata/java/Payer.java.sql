CREATE OR REPLACE AND COMPILE JAVA SOURCE NAMED "Payer" AS 
import com.sandata.lab.db.oracle.common.handler.OracleQueryHandler;
import oracle.sql.STRUCT;
import oracle.sql.ARRAY;
import java.sql.ResultSet;
import java.sql.SQLException;


public class Payer {

	private static String TABLE_NAME = "PAYER";

	private static String SEQUENCE_KEY_COLUMN_NAME = "PAYER_SK";

	private static int PRIMARY_KEY_INDEX = 1;

	private static int REC_TERM_TMSTP_INDEX = 5;

	private static int CURR_REC_IND_INDEX = 9;

	private static int TABLE_ID_COLUMN_INDEX = 13;

	private static int CHANGE_VERSION_ID_INDEX = 10;

	private static String INSERT_STATEMENT = "INSERT INTO PAYER(PAYER_SK,REC_CREATE_TMSTP,REC_UPDATE_TMSTP,REC_EFF_TMSTP,REC_TERM_TMSTP,REC_CREATED_BY,REC_UPDATED_BY,CHANGE_REASON_MEMO,CURR_REC_IND,CHANGE_VERSION_ID,BE_ID,TZ_NAME,PAYER_ID,PAYER_NAME,PAYER_TYP_QLFR,PAYER_SUB_TYP_CODE,PAYER_EFF_DATE,PAYER_TERM_DATE,PAYER_CONT_FIRST_NAME,PAYER_CONT_LAST_NAME,PAYER_CONT_TITLE,PAYER_CONT_PHONE,PAYER_CONT_EMAIL,PAYER_CONT_EMAIL_QLFR,PAYER_ADDR1,PAYER_ADDR2,PAYER_CITY,PAYER_COUNTY,PAYER_STATE,PAYER_PSTL_CODE,PAYER_ZIP4,PAYER_PHONE,PAYER_PHONE_EXT,PAYER_PHONE_QLFR,PAYER_PHONE_1,PAYER_PHONE_1_EXT,PAYER_PHONE_1_QLFR,PAYER_FAX,PAYER_FAX_QLFR,PAYER_FAX_1,PAYER_FAX_1_QLFR,PAYER_EMAIL,PAYER_EMAIL_QLFR,PAYER_BILL_TO_CONT_NAME,PAYER_BILL_TO_CONT_TITLE,PAYER_BILL_TO_ADDR1,PAYER_BILL_TO_ADDR2,PAYER_BILL_TO_CITY,PAYER_BILL_TO_STATE,PAYER_BILL_TO_PSTL_CODE,PAYER_BILL_TO_ZIP4,PAYER_BILL_TO_PHONE,PAYER_BILL_TO_PHONE_EXT,PAYER_REMIT_TO_CONT_NAME,PAYER_REMIT_TO_CONT_TITLE,PAYER_REMIT_TO_ADDR1,PAYER_REMIT_TO_ADDR2,PAYER_REMIT_TO_CITY,PAYER_REMIT_TO_STATE,PAYER_REMIT_TO_PSTL_CODE,PAYER_REMIT_TO_ZIP4,PAYER_REMIT_TO_PHONE,PAYER_REMIT_TO_PHONE_EXT,PAYER_EIN,PAYER_WEEK_END_DAY,PAYER_ACTIVE_IND,PAYER_BILL_CODE,PAYER_INV_FMT_TYP_NAME,PAYER_RSBMT_INV_FMT_TYP_NAME,PAYER_CLAIM_SUBM_FREQ_TYP_NAME,PAYER_WEEKEND_START_DAY,PAYER_WEEKEND_START_TIME,PAYER_WEEKEND_END_DAY,PAYER_WEEKEND_END_TIME,PAYER_EDI_ROUTING_ID,PAYER_SVC_UNIT_EQUIV,PAYER_LI_EQUIV,PAYER_EDI_SUBMITTABLE_IND,PAYER_HOLD_BILLING_IND,PAYER_SPLIT_BILLING_ALWD_IND,PAYER_NO_HOLIDAY_PAY_IND,PAYER_ELIG_CHECK_RQD_IND,PAYER_CDS_IND,PAYER_BILLING_UNIT_ROUND_IND,PAYER_SIG_RQD_IND,PAYER_PT_INS_ID_RQD_IND,PAYER_APPROVAL_TYP,PAYER_EDI_SUBMITTER_ID,PAYER_EDI_SUBMITTER_NAME,PAYER_EDI_RECEIVER_ID,PAYER_EDI_RECEIVER_NAME,PAYER_EDI_RECEIVER_ID_QLFR,PAYER_EDI_GRP_SUBMITTER_ID,PAYER_EDI_PROVIDER_COMML_ID,PAYER_BILL_TYP_CODE,PT_DISCHARGE_STATUS_CODE,PT_ADM_SRC_CODE,PT_ADM_TYP_CODE,PCP_CODE,PAYER_NURSE_NOTE_RQD_IND,PAYER_EDI_DATE_FMT_QLFR,PAYER_SVCING_LOC_QLFR,CLAIM_FILING_IND_CODE,PAYER_SVC_NON_OVRLP_IND) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

	public static ResultSet getPayer(ARRAY params) throws SQLException {

			StringBuilder errLog = new StringBuilder("Payer: getPayer: ");

			try {

					String selectPattern = "SELECT PAYER_SK,REC_CREATE_TMSTP,REC_UPDATE_TMSTP,REC_EFF_TMSTP,REC_TERM_TMSTP,REC_CREATED_BY,REC_UPDATED_BY,CHANGE_REASON_MEMO,CURR_REC_IND,CHANGE_VERSION_ID,BE_ID,TZ_NAME,PAYER_ID,PAYER_NAME,PAYER_TYP_QLFR,PAYER_SUB_TYP_CODE,PAYER_EFF_DATE,PAYER_TERM_DATE,PAYER_CONT_FIRST_NAME,PAYER_CONT_LAST_NAME,PAYER_CONT_TITLE,PAYER_CONT_PHONE,PAYER_CONT_EMAIL,PAYER_CONT_EMAIL_QLFR,PAYER_ADDR1,PAYER_ADDR2,PAYER_CITY,PAYER_COUNTY,PAYER_STATE,PAYER_PSTL_CODE,PAYER_ZIP4,PAYER_PHONE,PAYER_PHONE_EXT,PAYER_PHONE_QLFR,PAYER_PHONE_1,PAYER_PHONE_1_EXT,PAYER_PHONE_1_QLFR,PAYER_FAX,PAYER_FAX_QLFR,PAYER_FAX_1,PAYER_FAX_1_QLFR,PAYER_EMAIL,PAYER_EMAIL_QLFR,PAYER_BILL_TO_CONT_NAME,PAYER_BILL_TO_CONT_TITLE,PAYER_BILL_TO_ADDR1,PAYER_BILL_TO_ADDR2,PAYER_BILL_TO_CITY,PAYER_BILL_TO_STATE,PAYER_BILL_TO_PSTL_CODE,PAYER_BILL_TO_ZIP4,PAYER_BILL_TO_PHONE,PAYER_BILL_TO_PHONE_EXT,PAYER_REMIT_TO_CONT_NAME,PAYER_REMIT_TO_CONT_TITLE,PAYER_REMIT_TO_ADDR1,PAYER_REMIT_TO_ADDR2,PAYER_REMIT_TO_CITY,PAYER_REMIT_TO_STATE,PAYER_REMIT_TO_PSTL_CODE,PAYER_REMIT_TO_ZIP4,PAYER_REMIT_TO_PHONE,PAYER_REMIT_TO_PHONE_EXT,PAYER_EIN,PAYER_WEEK_END_DAY,PAYER_ACTIVE_IND,PAYER_BILL_CODE,PAYER_INV_FMT_TYP_NAME,PAYER_RSBMT_INV_FMT_TYP_NAME,PAYER_CLAIM_SUBM_FREQ_TYP_NAME,PAYER_WEEKEND_START_DAY,PAYER_WEEKEND_START_TIME,PAYER_WEEKEND_END_DAY,PAYER_WEEKEND_END_TIME,PAYER_EDI_ROUTING_ID,PAYER_SVC_UNIT_EQUIV,PAYER_LI_EQUIV,PAYER_EDI_SUBMITTABLE_IND,PAYER_HOLD_BILLING_IND,PAYER_SPLIT_BILLING_ALWD_IND,PAYER_NO_HOLIDAY_PAY_IND,PAYER_ELIG_CHECK_RQD_IND,PAYER_CDS_IND,PAYER_BILLING_UNIT_ROUND_IND,PAYER_SIG_RQD_IND,PAYER_PT_INS_ID_RQD_IND,PAYER_APPROVAL_TYP,PAYER_EDI_SUBMITTER_ID,PAYER_EDI_SUBMITTER_NAME,PAYER_EDI_RECEIVER_ID,PAYER_EDI_RECEIVER_NAME,PAYER_EDI_RECEIVER_ID_QLFR,PAYER_EDI_GRP_SUBMITTER_ID,PAYER_EDI_PROVIDER_COMML_ID,PAYER_BILL_TYP_CODE,PT_DISCHARGE_STATUS_CODE,PT_ADM_SRC_CODE,PT_ADM_TYP_CODE,PCP_CODE,PAYER_NURSE_NOTE_RQD_IND,PAYER_EDI_DATE_FMT_QLFR,PAYER_SVCING_LOC_QLFR,CLAIM_FILING_IND_CODE,PAYER_SVC_NON_OVRLP_IND FROM PAYER %s";

					String whereClause = "WHERE BE_ID=? AND (TO_CHAR(REC_TERM_TMSTP, 'YYYY-MM-DD') = '9999-12-31' AND CURR_REC_IND = '1')";

					return new OracleQueryHandler().execute(selectPattern, whereClause, params);

			} catch (Exception e) {
					errLog.append("[Exception: " + e.getClass().getName() + ": [Message: " + e.getMessage() + "]");
					throw new SQLException(errLog.toString());

			}
	}

	public static ResultSet getPayer(long primaryKey) throws SQLException {

			StringBuilder errLog = new StringBuilder("Payer: getPayer: ");

			try {

					String sql = String.format("SELECT PAYER_SK,REC_CREATE_TMSTP,REC_UPDATE_TMSTP,REC_EFF_TMSTP,REC_TERM_TMSTP,REC_CREATED_BY,REC_UPDATED_BY,CHANGE_REASON_MEMO,CURR_REC_IND,CHANGE_VERSION_ID,BE_ID,TZ_NAME,PAYER_ID,PAYER_NAME,PAYER_TYP_QLFR,PAYER_SUB_TYP_CODE,PAYER_EFF_DATE,PAYER_TERM_DATE,PAYER_CONT_FIRST_NAME,PAYER_CONT_LAST_NAME,PAYER_CONT_TITLE,PAYER_CONT_PHONE,PAYER_CONT_EMAIL,PAYER_CONT_EMAIL_QLFR,PAYER_ADDR1,PAYER_ADDR2,PAYER_CITY,PAYER_COUNTY,PAYER_STATE,PAYER_PSTL_CODE,PAYER_ZIP4,PAYER_PHONE,PAYER_PHONE_EXT,PAYER_PHONE_QLFR,PAYER_PHONE_1,PAYER_PHONE_1_EXT,PAYER_PHONE_1_QLFR,PAYER_FAX,PAYER_FAX_QLFR,PAYER_FAX_1,PAYER_FAX_1_QLFR,PAYER_EMAIL,PAYER_EMAIL_QLFR,PAYER_BILL_TO_CONT_NAME,PAYER_BILL_TO_CONT_TITLE,PAYER_BILL_TO_ADDR1,PAYER_BILL_TO_ADDR2,PAYER_BILL_TO_CITY,PAYER_BILL_TO_STATE,PAYER_BILL_TO_PSTL_CODE,PAYER_BILL_TO_ZIP4,PAYER_BILL_TO_PHONE,PAYER_BILL_TO_PHONE_EXT,PAYER_REMIT_TO_CONT_NAME,PAYER_REMIT_TO_CONT_TITLE,PAYER_REMIT_TO_ADDR1,PAYER_REMIT_TO_ADDR2,PAYER_REMIT_TO_CITY,PAYER_REMIT_TO_STATE,PAYER_REMIT_TO_PSTL_CODE,PAYER_REMIT_TO_ZIP4,PAYER_REMIT_TO_PHONE,PAYER_REMIT_TO_PHONE_EXT,PAYER_EIN,PAYER_WEEK_END_DAY,PAYER_ACTIVE_IND,PAYER_BILL_CODE,PAYER_INV_FMT_TYP_NAME,PAYER_RSBMT_INV_FMT_TYP_NAME,PAYER_CLAIM_SUBM_FREQ_TYP_NAME,PAYER_WEEKEND_START_DAY,PAYER_WEEKEND_START_TIME,PAYER_WEEKEND_END_DAY,PAYER_WEEKEND_END_TIME,PAYER_EDI_ROUTING_ID,PAYER_SVC_UNIT_EQUIV,PAYER_LI_EQUIV,PAYER_EDI_SUBMITTABLE_IND,PAYER_HOLD_BILLING_IND,PAYER_SPLIT_BILLING_ALWD_IND,PAYER_NO_HOLIDAY_PAY_IND,PAYER_ELIG_CHECK_RQD_IND,PAYER_CDS_IND,PAYER_BILLING_UNIT_ROUND_IND,PAYER_SIG_RQD_IND,PAYER_PT_INS_ID_RQD_IND,PAYER_APPROVAL_TYP,PAYER_EDI_SUBMITTER_ID,PAYER_EDI_SUBMITTER_NAME,PAYER_EDI_RECEIVER_ID,PAYER_EDI_RECEIVER_NAME,PAYER_EDI_RECEIVER_ID_QLFR,PAYER_EDI_GRP_SUBMITTER_ID,PAYER_EDI_PROVIDER_COMML_ID,PAYER_BILL_TYP_CODE,PT_DISCHARGE_STATUS_CODE,PT_ADM_SRC_CODE,PT_ADM_TYP_CODE,PCP_CODE,PAYER_NURSE_NOTE_RQD_IND,PAYER_EDI_DATE_FMT_QLFR,PAYER_SVCING_LOC_QLFR,CLAIM_FILING_IND_CODE,PAYER_SVC_NON_OVRLP_IND FROM %s WHERE %s=? AND (TO_CHAR(REC_TERM_TMSTP, 'YYYY-MM-DD') = '9999-12-31' AND CURR_REC_IND = '1')", TABLE_NAME, SEQUENCE_KEY_COLUMN_NAME);

					return new OracleQueryHandler().execute(sql, new Object[]{primaryKey});

			} catch (Exception e) {
					errLog.append("[Exception: " + e.getClass().getName() + ": [Message: " + e.getMessage() + "]");
					throw new SQLException(errLog.toString());

			}
	}

	public static long insertPayer(STRUCT struct) throws SQLException {

			StringBuilder errLog = new StringBuilder("Payer: insertPayer: ");

			try {

					return new OracleQueryHandler().executeInsert(TABLE_NAME, INSERT_STATEMENT, PRIMARY_KEY_INDEX, REC_TERM_TMSTP_INDEX, CURR_REC_IND_INDEX, TABLE_ID_COLUMN_INDEX, CHANGE_VERSION_ID_INDEX, struct);

			} catch (Exception e) {
					errLog.append("[Exception: " + e.getClass().getName() + ": [Message: " + e.getMessage() + "]");
					throw new SQLException(errLog.toString());

			}
	}

	public static long updatePayer(STRUCT struct) throws SQLException {

			StringBuilder errLog = new StringBuilder("Payer: updatePayer: ");

			try {

					return new OracleQueryHandler().executeUpdate(TABLE_NAME, SEQUENCE_KEY_COLUMN_NAME, CHANGE_VERSION_ID_INDEX, struct);

			} catch (Exception e) {
					errLog.append("[Exception: " + e.getClass().getName() + ": [Message: " + e.getMessage() + "]");
					throw new SQLException(errLog.toString());

			}
	}

	public static long deletePayer(long primaryKey) throws SQLException {

			StringBuilder errLog = new StringBuilder("Payer: deletePayer: ");

			try {

					return  new OracleQueryHandler().executeDelete(TABLE_NAME, SEQUENCE_KEY_COLUMN_NAME, primaryKey, true);

			} catch (Exception e) {
					errLog.append("[Exception: " + e.getClass().getName() + ": [Message: " + e.getMessage() + "]");
					throw new SQLException(errLog.toString());

			}
	}



}
;
/
