//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.11.27 at 10:53:27 PM EST 
//


using Sandata.George.Common;
using Sandata.George.Common.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;





/**
 * Healthcare Common Procedural Coding System
 * HCPCS is divided into two principal subsystems, referred to as level I and level II of the HCPCS.
 * Level I of the HCPCS is comprised of CPT (Current Procedural Terminology), a numeric coding system maintained by the American Medical Association (AMA). 
 * Level I of the HCPCS, the CPT codes, does not include codes needed to separately report medical items or services that are regularly billed by suppliers other than physicians.
 * Level II of the HCPCS is a standardized coding system that is used primarily to identify products, supplies, and services not included in the CPT codes, such as ambulance services and durable medical equipment, prosthetics, orthotics, and supplies (DMEPOS) when used outside a physician's office. 
 * Because Medicare and other insurers cover a variety of services, supplies, and equipment that are not identified by CPT codes, the level II HCPCS codes were established for submitting claims for these items. 
 * Level II codes are also referred to as alpha-numeric codes because they consist of a single alphabetical letter followed by 4 numeric digits, while CPT codes are identified using 5 numeric digits.
 * 
 * Note: The entity is Business Entitiy specific.
 * 
 * <p>Java class for Payer_Billing_Code_Lookup complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Payer_Billing_Code_Lookup">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{}Claim_Line" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Accounts_Receivable" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Order_Service" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Service" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Billing_Detail" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Authorization_Service" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Contract_Billing_Code_List" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Claim_Payment_Advice_Line" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Billing_Rate_Matrix" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Invoice_Detail" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="Payer_Billing_Code_Lookup_SK" use="required" type="{}Surrogate_Key" />
 *       &lt;attribute name="Record_Create_Timestamp" use="required" type="{}Record_Create_Timestamp" />
 *       &lt;attribute name="Record_Update_Timestamp" use="required" type="{}Record_Update_Timestamp" />
 *       &lt;attribute name="Record_Effective_Timestamp" use="required" type="{}Record_Effective_Timestamp" />
 *       &lt;attribute name="Record_Termination_Timestamp" use="required" type="{}Record_Termination_Timestamp" />
 *       &lt;attribute name="Record_Created_By" type="{}Record_Created_By" />
 *       &lt;attribute name="Record_Updated_By" type="{}Record_Updated_By" />
 *       &lt;attribute name="Change_Reason_Memo" type="{}Change_Reason_Memo" />
 *       &lt;attribute name="Current_Record_Indicator" use="required" type="{}Current_Record_Indicator" />
 *       &lt;attribute name="Change_Version_ID" use="required" type="{}Change_Version_ID" />
 *       &lt;attribute name="Business_Entity_ID" use="required" type="{}ID" />
 *       &lt;attribute name="Payer_ID" use="required" type="{}ID" />
 *       &lt;attribute name="Billing_Code" use="required" type="{}Billing_Code" />
 *       &lt;attribute name="Billing_Code_Short_Description" type="{}Description_Short" />
 *       &lt;attribute name="Billing_Code_Long_Description" type="{}Description_Very_Long" />
 *       &lt;attribute name="Billing_Code_Effective_Date" type="{}Attribute_Effective_Date" />
 *       &lt;attribute name="Billing_Code_Termination_Date" type="{}Attribute_Termination_Date" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
namespace Sandata.George.Domain.Entities
{
	[DataContract]
	public class PayerBillingCodeLookup
	{

			[DataMember]
			public List<ClaimLine> ClaimLineCollection { get; set; }

			[DataMember]
			public List<AccountsReceivable> AccountsReceivableCollection { get; set; }

			[DataMember]
			public List<OrderService> OrderServiceCollection { get; set; }

			[DataMember]
			public List<Service> ServiceCollection { get; set; }

			[DataMember]
			public List<BillingDetail> BillingDetailCollection { get; set; }

			[DataMember]
			public List<AuthorizationService> AuthorizationServiceCollection { get; set; }

			[DataMember]
			public List<ContractBillingCodeList> ContractBillingCodeListCollection { get; set; }

			[DataMember]
			public List<ClaimPaymentAdviceLine> ClaimPaymentAdviceLineCollection { get; set; }

			[DataMember]
			public List<BillingRateMatrix> BillingRateMatrixCollection { get; set; }

			[DataMember]
			public List<InvoiceDetail> InvoiceDetailCollection { get; set; }

			[DataMember(IsRequired = true)]
			public long PayerBillingCodeLookupSK { get; set; }

			[IgnoreDataMember]
			public DateTime RecordCreateTimestamp { get; set; }

			[DataMember(Name = "RecordCreateTimestamp", IsRequired = true)]
			public string RecordCreateTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordCreateTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordCreateTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public DateTime RecordUpdateTimestamp { get; set; }

			[DataMember(Name = "RecordUpdateTimestamp", IsRequired = true)]
			public string RecordUpdateTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordUpdateTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordUpdateTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public DateTime RecordEffectiveTimestamp { get; set; }

			[DataMember(Name = "RecordEffectiveTimestamp", IsRequired = true)]
			public string RecordEffectiveTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordEffectiveTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordEffectiveTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public DateTime RecordTerminationTimestamp { get; set; }

			[DataMember(Name = "RecordTerminationTimestamp", IsRequired = true)]
			public string RecordTerminationTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordTerminationTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordTerminationTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public String RecordCreatedBy { get; set; }

			[DataMember]
			public String RecordUpdatedBy { get; set; }

			[DataMember]
			public String ChangeReasonMemo { get; set; }

			[DataMember(IsRequired = true)]
			public bool CurrentRecordIndicator { get; set; }

			[DataMember(IsRequired = true)]
			public long ChangeVersionID { get; set; }

			[DataMember(IsRequired = true)]
			public String BusinessEntityID { get; set; }

			[DataMember(IsRequired = true)]
			public String PayerID { get; set; }

			[DataMember(IsRequired = true)]
			public String BillingCodeProperty { get; set; }

			[DataMember]
			public String BillingCodeShortDescription { get; set; }

			[DataMember]
			public String BillingCodeLongDescription { get; set; }

			[IgnoreDataMember]
			public Nullable<DateTime> BillingCodeEffectiveDate { get; set; }

			[DataMember(Name = "BillingCodeEffectiveDate")]
			public string BillingCodeEffectiveDateStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(BillingCodeEffectiveDate);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						BillingCodeEffectiveDate = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public Nullable<DateTime> BillingCodeTerminationDate { get; set; }

			[DataMember(Name = "BillingCodeTerminationDate")]
			public string BillingCodeTerminationDateStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(BillingCodeTerminationDate);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						BillingCodeTerminationDate = DateTimeHelper.ToDateTime(value);
					}
				}
			}


	}
}
