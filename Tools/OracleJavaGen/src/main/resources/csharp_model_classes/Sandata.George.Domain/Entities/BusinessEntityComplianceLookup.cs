//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.11.27 at 10:53:27 PM EST 
//


using Sandata.George.Common;
using Sandata.George.Common.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;





/**
 * Lookup entity that stores the list of compliance items/activities.
 * 
 * Note: The entity is Business Entitiy specific.
 * 
 * <p>Java class for Business_Entity_Compliance_Lookup complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Business_Entity_Compliance_Lookup">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{}Medical_Examination_Item_Compliance_Crosswalk" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Business_Entity_Compliance_Service_List" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Staff_Compliance" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="Business_Entity_Compliance_Relationship" type="{}Business_Entity_Compliance_Relationship" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Business_Entity_Compliance_Additional_Information_Lookup" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="Business_Entity_Compliance_Lookup_SK" use="required" type="{}Surrogate_Key" />
 *       &lt;attribute name="Record_Create_Timestamp" use="required" type="{}Record_Create_Timestamp" />
 *       &lt;attribute name="Record_Update_Timestamp" use="required" type="{}Record_Update_Timestamp" />
 *       &lt;attribute name="Record_Effective_Timestamp" use="required" type="{}Record_Effective_Timestamp" />
 *       &lt;attribute name="Record_Termination_Timestamp" use="required" type="{}Record_Termination_Timestamp" />
 *       &lt;attribute name="Record_Created_By" type="{}Record_Created_By" />
 *       &lt;attribute name="Record_Updated_By" type="{}Record_Updated_By" />
 *       &lt;attribute name="Change_Reason_Memo" type="{}Change_Reason_Memo" />
 *       &lt;attribute name="Current_Record_Indicator" use="required" type="{}Current_Record_Indicator" />
 *       &lt;attribute name="Change_Version_ID" use="required" type="{}Change_Version_ID" />
 *       &lt;attribute name="Business_Entity_ID" use="required" type="{}ID" />
 *       &lt;attribute name="Compliance_Category_Code" type="{}ID" />
 *       &lt;attribute name="Compliance_Effective_Date" use="required" type="{}Attribute_Effective_Date" />
 *       &lt;attribute name="Compliance_Termination_Date" type="{}Attribute_Termination_Date" />
 *       &lt;attribute name="Compliance_Code" use="required" type="{}Code" />
 *       &lt;attribute name="Compliance_Name" type="{}Name_Generic" />
 *       &lt;attribute name="Compliance_Description" type="{}Description_Long" />
 *       &lt;attribute name="Compliance_Recurring_Indicator" use="required" type="{}Indicator" />
 *       &lt;attribute name="Compliance_Required_By_Date" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *       &lt;attribute name="Compliance_Recurring_Frequency" type="{http://www.w3.org/2001/XMLSchema}integer" />
 *       &lt;attribute name="Compliance_Recurring_Frequency_Unit_of_Measure">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             &lt;maxLength value="50"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *       &lt;attribute name="Compliance_Required_From_Date_Qualifier" type="{}Staff_Item_Required_From_Qualifier" />
 *       &lt;attribute name="Non_Compliance_Alert_Indicator" type="{}Indicator" />
 *       &lt;attribute name="Non_Compliance_Alert_Threshold" type="{}Non_Compliance_Alert_Threshold" />
 *       &lt;attribute name="Compliance_Note" type="{}Description_Long" />
 *       &lt;attribute name="Compliance_Additional_Information_Qualifier" type="{}Compliance_Additional_Information_Qualifier" />
 *       &lt;attribute name="Compliance_Additional_Information_Required_Indicator" type="{}Indicator" />
 *       &lt;attribute name="Compliance_Additional_Information_Name" type="{}Name_Generic" />
 *       &lt;attribute name="Compliance_Requisite_Item_Indicator" type="{}Indicator" />
 *       &lt;attribute name="Compliance_Schedule_Permission_Qualifier" use="required" type="{}Schedule_Permission_Qualifier" />
 *       &lt;attribute name="Compliance_Required_From_Date" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
namespace Sandata.George.Domain.Entities
{
	[DataContract]
	public class BusinessEntityComplianceLookup
	{

			[DataMember]
			public List<MedicalExaminationItemComplianceCrosswalk> MedicalExaminationItemComplianceCrosswalkCollection { get; set; }

			[DataMember]
			public List<BusinessEntityComplianceServiceList> BusinessEntityComplianceServiceListCollection { get; set; }

			[DataMember]
			public List<StaffCompliance> StaffComplianceCollection { get; set; }

			[DataMember]
			public List<BusinessEntityComplianceRelationship> BusinessEntityComplianceRelationshipCollection { get; set; }

			[DataMember]
			public List<BusinessEntityComplianceAdditionalInformationLookup> BusinessEntityComplianceAdditionalInformationLookupCollection { get; set; }

			[DataMember(IsRequired = true)]
			public long BusinessEntityComplianceLookupSK { get; set; }

			[IgnoreDataMember]
			public DateTime RecordCreateTimestamp { get; set; }

			[DataMember(Name = "RecordCreateTimestamp", IsRequired = true)]
			public string RecordCreateTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordCreateTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordCreateTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public DateTime RecordUpdateTimestamp { get; set; }

			[DataMember(Name = "RecordUpdateTimestamp", IsRequired = true)]
			public string RecordUpdateTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordUpdateTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordUpdateTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public DateTime RecordEffectiveTimestamp { get; set; }

			[DataMember(Name = "RecordEffectiveTimestamp", IsRequired = true)]
			public string RecordEffectiveTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordEffectiveTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordEffectiveTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public DateTime RecordTerminationTimestamp { get; set; }

			[DataMember(Name = "RecordTerminationTimestamp", IsRequired = true)]
			public string RecordTerminationTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordTerminationTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordTerminationTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public String RecordCreatedBy { get; set; }

			[DataMember]
			public String RecordUpdatedBy { get; set; }

			[DataMember]
			public String ChangeReasonMemo { get; set; }

			[DataMember(IsRequired = true)]
			public bool CurrentRecordIndicator { get; set; }

			[DataMember(IsRequired = true)]
			public long ChangeVersionID { get; set; }

			[DataMember(IsRequired = true)]
			public String BusinessEntityID { get; set; }

			[DataMember]
			public String ComplianceCategoryCode { get; set; }

			[IgnoreDataMember]
			public DateTime ComplianceEffectiveDate { get; set; }

			[DataMember(Name = "ComplianceEffectiveDate", IsRequired = true)]
			public string ComplianceEffectiveDateStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(ComplianceEffectiveDate);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						ComplianceEffectiveDate = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public Nullable<DateTime> ComplianceTerminationDate { get; set; }

			[DataMember(Name = "ComplianceTerminationDate")]
			public string ComplianceTerminationDateStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(ComplianceTerminationDate);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						ComplianceTerminationDate = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember(IsRequired = true)]
			public String ComplianceCode { get; set; }

			[DataMember]
			public String ComplianceName { get; set; }

			[DataMember]
			public String ComplianceDescription { get; set; }

			[DataMember(IsRequired = true)]
			public bool ComplianceRecurringIndicator { get; set; }

			[IgnoreDataMember]
			public Nullable<DateTime> ComplianceRequiredByDate { get; set; }

			[DataMember(Name = "ComplianceRequiredByDate")]
			public string ComplianceRequiredByDateStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(ComplianceRequiredByDate);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						ComplianceRequiredByDate = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public long? ComplianceRecurringFrequency { get; set; }

			[DataMember]
			public String ComplianceRecurringFrequencyUnitofMeasure { get; set; }

			[DataMember]
			public StaffItemRequiredFromQualifier ComplianceRequiredFromDateQualifier { get; set; }

			[DataMember]
			public bool? NonComplianceAlertIndicator { get; set; }

			[DataMember]
			public long? NonComplianceAlertThreshold { get; set; }

			[DataMember]
			public String ComplianceNote { get; set; }

			[DataMember]
			public ComplianceAdditionalInformationQualifier ComplianceAdditionalInformationQualifier { get; set; }

			[DataMember]
			public bool? ComplianceAdditionalInformationRequiredIndicator { get; set; }

			[DataMember]
			public String ComplianceAdditionalInformationName { get; set; }

			[DataMember]
			public bool? ComplianceRequisiteItemIndicator { get; set; }

			[DataMember(IsRequired = true)]
			public SchedulePermissionQualifier ComplianceSchedulePermissionQualifier { get; set; }

			[IgnoreDataMember]
			public Nullable<DateTime> ComplianceRequiredFromDate { get; set; }

			[DataMember(Name = "ComplianceRequiredFromDate")]
			public string ComplianceRequiredFromDateStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(ComplianceRequiredFromDate);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						ComplianceRequiredFromDate = DateTimeHelper.ToDateTime(value);
					}
				}
			}


	}
}
