//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.11.27 at 10:53:27 PM EST 
//


using Sandata.George.Common;
using Sandata.George.Common.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;





/**
 * Authorization for services to be rendered from the payer. 
 * Triggered when an actual insurance carrier is selected. 
 * If it is Private Pay no authorization is required.
 * 
 * <p>Java class for Authorization complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Authorization">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{}Patient_Intake" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Visit_Authorization" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Schedule_Event_Authorization" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Schedule_Authorization" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Authorization_Service" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="Claim" type="{}Claim" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Authorization" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Schedule_Event" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Invoice" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Accounts_Receivable" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Billing" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Claim_Line" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="Authorization_SK" use="required" type="{}Surrogate_Key" />
 *       &lt;attribute name="Authorization_Parent_SK" type="{}Surrogate_Key" />
 *       &lt;attribute name="Authorization_ID" use="required" type="{}ID" />
 *       &lt;attribute name="Record_Create_Timestamp" use="required" type="{}Record_Create_Timestamp" />
 *       &lt;attribute name="Record_Update_Timestamp" use="required" type="{}Record_Update_Timestamp" />
 *       &lt;attribute name="Record_Effective_Timestamp" use="required" type="{}Record_Effective_Timestamp" />
 *       &lt;attribute name="Record_Termination_Timestamp" use="required" type="{}Record_Termination_Timestamp" />
 *       &lt;attribute name="Record_Created_By" type="{}Record_Created_By" />
 *       &lt;attribute name="Record_Updated_By" type="{}Record_Updated_By" />
 *       &lt;attribute name="Change_Reason_Memo" type="{}Change_Reason_Memo" />
 *       &lt;attribute name="Current_Record_Indicator" use="required" type="{}Current_Record_Indicator" />
 *       &lt;attribute name="Change_Version_ID" use="required" type="{}Change_Version_ID" />
 *       &lt;attribute name="Business_Entity_ID" use="required" type="{}ID" />
 *       &lt;attribute name="Patient_ID" use="required" type="{}ID" />
 *       &lt;attribute name="Payer_ID" type="{}ID" />
 *       &lt;attribute name="Order_SK" type="{}Surrogate_Key" />
 *       &lt;attribute name="Authorization_Issued_Date" type="{http://www.w3.org/2001/XMLSchema}date" />
 *       &lt;attribute name="Authorization_Start_Timestamp" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *       &lt;attribute name="Authorization_End_Timestamp" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *       &lt;attribute name="Authorization_Comment" type="{}Comment_Long" />
 *       &lt;attribute name="Authorization_Limit_Type_Name" type="{}Authorization_Limit_Type_Name" />
 *       &lt;attribute name="Authorization_Service_Unit_Name" use="required" type="{}Authorization_Service_Unit_Name" />
 *       &lt;attribute name="Authorization_Limit" type="{}Authorization_Limit" />
 *       &lt;attribute name="Authorization_Limit_Total" type="{}Authorization_Limit" />
 *       &lt;attribute name="Authorization_Limit_Day_1" type="{}Authorization_Limit" />
 *       &lt;attribute name="Authorization_Limit_Start_Time_Day_1" type="{}Authorization_Limit_Time" />
 *       &lt;attribute name="Authorization_Limit_End_Time_Day_1" type="{}Authorization_Limit_Time" />
 *       &lt;attribute name="Authorization_Limit_Day_2" type="{}Authorization_Limit" />
 *       &lt;attribute name="Authorization_Limit_Start_Time_Day_2" type="{}Authorization_Limit_Time" />
 *       &lt;attribute name="Authorization_Limit_End_Time_Day_2" type="{}Authorization_Limit_Time" />
 *       &lt;attribute name="Authorization_Limit_Day_3" type="{}Authorization_Limit" />
 *       &lt;attribute name="Authorization_Limit_Start_Time_Day_3" type="{}Authorization_Limit_Time" />
 *       &lt;attribute name="Authorization_Limit_End_Time_Day_3" type="{}Authorization_Limit_Time" />
 *       &lt;attribute name="Authorization_Limit_Day_4" type="{}Authorization_Limit" />
 *       &lt;attribute name="Authorization_Limit_Start_Time_Day_4" type="{}Authorization_Limit_Time" />
 *       &lt;attribute name="Authorization_Limit_End_Time_Day_4" type="{}Authorization_Limit_Time" />
 *       &lt;attribute name="Authorization_Limit_Day_5" type="{}Authorization_Limit" />
 *       &lt;attribute name="Authorization_Limit_Start_Time_Day_5" type="{}Authorization_Limit_Time" />
 *       &lt;attribute name="Authorization_Limit_End_Time_Day_5" type="{}Authorization_Limit_Time" />
 *       &lt;attribute name="Authorization_Limit_Day_6" type="{}Authorization_Limit" />
 *       &lt;attribute name="Authorization_Limit_Start_Time_Day_6" type="{}Authorization_Limit_Time" />
 *       &lt;attribute name="Authorization_Limit_End_Time_Day_6" type="{}Authorization_Limit_Time" />
 *       &lt;attribute name="Authorization_Limit_Day_7" type="{}Authorization_Limit" />
 *       &lt;attribute name="Authorization_Limit_Start_Time_Day_7" type="{}Authorization_Limit_Time" />
 *       &lt;attribute name="Authorization_Limit_End_Time_Day_7" type="{}Authorization_Limit_Time" />
 *       &lt;attribute name="Contract_ID" type="{}ID" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
namespace Sandata.George.Domain.Entities
{
	[DataContract]
	public class Authorization
	{

			[DataMember]
			public List<PatientIntake> PatientIntakeCollection { get; set; }

			[DataMember]
			public List<VisitAuthorization> VisitAuthorizationCollection { get; set; }

			[DataMember]
			public List<ScheduleEventAuthorization> ScheduleEventAuthorizationCollection { get; set; }

			[DataMember]
			public List<ScheduleAuthorization> ScheduleAuthorizationCollection { get; set; }

			[DataMember]
			public List<AuthorizationService> AuthorizationServiceCollection { get; set; }

			[DataMember]
			public List<Claim> ClaimCollection { get; set; }

			[DataMember]
			public List<Authorization> AuthorizationPropertyCollection { get; set; }

			[DataMember]
			public List<ScheduleEvent> ScheduleEventCollection { get; set; }

			[DataMember]
			public List<Invoice> InvoiceCollection { get; set; }

			[DataMember]
			public List<AccountsReceivable> AccountsReceivableCollection { get; set; }

			[DataMember]
			public List<Billing> BillingCollection { get; set; }

			[DataMember]
			public List<ClaimLine> ClaimLineCollection { get; set; }

			[DataMember(IsRequired = true)]
			public long AuthorizationSK { get; set; }

			[DataMember]
			public long? AuthorizationParentSK { get; set; }

			[DataMember(IsRequired = true)]
			public String AuthorizationID { get; set; }

			[IgnoreDataMember]
			public DateTime RecordCreateTimestamp { get; set; }

			[DataMember(Name = "RecordCreateTimestamp", IsRequired = true)]
			public string RecordCreateTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordCreateTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordCreateTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public DateTime RecordUpdateTimestamp { get; set; }

			[DataMember(Name = "RecordUpdateTimestamp", IsRequired = true)]
			public string RecordUpdateTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordUpdateTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordUpdateTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public DateTime RecordEffectiveTimestamp { get; set; }

			[DataMember(Name = "RecordEffectiveTimestamp", IsRequired = true)]
			public string RecordEffectiveTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordEffectiveTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordEffectiveTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public DateTime RecordTerminationTimestamp { get; set; }

			[DataMember(Name = "RecordTerminationTimestamp", IsRequired = true)]
			public string RecordTerminationTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordTerminationTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordTerminationTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public String RecordCreatedBy { get; set; }

			[DataMember]
			public String RecordUpdatedBy { get; set; }

			[DataMember]
			public String ChangeReasonMemo { get; set; }

			[DataMember(IsRequired = true)]
			public bool CurrentRecordIndicator { get; set; }

			[DataMember(IsRequired = true)]
			public long ChangeVersionID { get; set; }

			[DataMember(IsRequired = true)]
			public String BusinessEntityID { get; set; }

			[DataMember(IsRequired = true)]
			public String PatientID { get; set; }

			[DataMember]
			public String PayerID { get; set; }

			[DataMember]
			public long? OrderSK { get; set; }

			[IgnoreDataMember]
			public Nullable<DateTime> AuthorizationIssuedDate { get; set; }

			[DataMember(Name = "AuthorizationIssuedDate")]
			public string AuthorizationIssuedDateStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(AuthorizationIssuedDate);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						AuthorizationIssuedDate = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public Nullable<DateTime> AuthorizationStartTimestamp { get; set; }

			[DataMember(Name = "AuthorizationStartTimestamp")]
			public string AuthorizationStartTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(AuthorizationStartTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						AuthorizationStartTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public Nullable<DateTime> AuthorizationEndTimestamp { get; set; }

			[DataMember(Name = "AuthorizationEndTimestamp")]
			public string AuthorizationEndTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(AuthorizationEndTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						AuthorizationEndTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public String AuthorizationComment { get; set; }

			[DataMember]
			public AuthorizationLimitTypeName AuthorizationLimitTypeName { get; set; }

			[DataMember(IsRequired = true)]
			public AuthorizationServiceUnitName AuthorizationServiceUnitName { get; set; }

			[DataMember]
			public decimal? AuthorizationLimit { get; set; }

			[DataMember]
			public decimal? AuthorizationLimitTotal { get; set; }

			[DataMember]
			public decimal? AuthorizationLimitDay1 { get; set; }

			[IgnoreDataMember]
			public Nullable<DateTime> AuthorizationLimitStartTimeDay1 { get; set; }

			[DataMember(Name = "AuthorizationLimitStartTimeDay1")]
			public string AuthorizationLimitStartTimeDay1Str
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(AuthorizationLimitStartTimeDay1);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						AuthorizationLimitStartTimeDay1 = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public Nullable<DateTime> AuthorizationLimitEndTimeDay1 { get; set; }

			[DataMember(Name = "AuthorizationLimitEndTimeDay1")]
			public string AuthorizationLimitEndTimeDay1Str
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(AuthorizationLimitEndTimeDay1);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						AuthorizationLimitEndTimeDay1 = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public decimal? AuthorizationLimitDay2 { get; set; }

			[IgnoreDataMember]
			public Nullable<DateTime> AuthorizationLimitStartTimeDay2 { get; set; }

			[DataMember(Name = "AuthorizationLimitStartTimeDay2")]
			public string AuthorizationLimitStartTimeDay2Str
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(AuthorizationLimitStartTimeDay2);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						AuthorizationLimitStartTimeDay2 = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public Nullable<DateTime> AuthorizationLimitEndTimeDay2 { get; set; }

			[DataMember(Name = "AuthorizationLimitEndTimeDay2")]
			public string AuthorizationLimitEndTimeDay2Str
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(AuthorizationLimitEndTimeDay2);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						AuthorizationLimitEndTimeDay2 = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public decimal? AuthorizationLimitDay3 { get; set; }

			[IgnoreDataMember]
			public Nullable<DateTime> AuthorizationLimitStartTimeDay3 { get; set; }

			[DataMember(Name = "AuthorizationLimitStartTimeDay3")]
			public string AuthorizationLimitStartTimeDay3Str
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(AuthorizationLimitStartTimeDay3);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						AuthorizationLimitStartTimeDay3 = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public Nullable<DateTime> AuthorizationLimitEndTimeDay3 { get; set; }

			[DataMember(Name = "AuthorizationLimitEndTimeDay3")]
			public string AuthorizationLimitEndTimeDay3Str
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(AuthorizationLimitEndTimeDay3);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						AuthorizationLimitEndTimeDay3 = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public decimal? AuthorizationLimitDay4 { get; set; }

			[IgnoreDataMember]
			public Nullable<DateTime> AuthorizationLimitStartTimeDay4 { get; set; }

			[DataMember(Name = "AuthorizationLimitStartTimeDay4")]
			public string AuthorizationLimitStartTimeDay4Str
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(AuthorizationLimitStartTimeDay4);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						AuthorizationLimitStartTimeDay4 = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public Nullable<DateTime> AuthorizationLimitEndTimeDay4 { get; set; }

			[DataMember(Name = "AuthorizationLimitEndTimeDay4")]
			public string AuthorizationLimitEndTimeDay4Str
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(AuthorizationLimitEndTimeDay4);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						AuthorizationLimitEndTimeDay4 = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public decimal? AuthorizationLimitDay5 { get; set; }

			[IgnoreDataMember]
			public Nullable<DateTime> AuthorizationLimitStartTimeDay5 { get; set; }

			[DataMember(Name = "AuthorizationLimitStartTimeDay5")]
			public string AuthorizationLimitStartTimeDay5Str
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(AuthorizationLimitStartTimeDay5);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						AuthorizationLimitStartTimeDay5 = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public Nullable<DateTime> AuthorizationLimitEndTimeDay5 { get; set; }

			[DataMember(Name = "AuthorizationLimitEndTimeDay5")]
			public string AuthorizationLimitEndTimeDay5Str
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(AuthorizationLimitEndTimeDay5);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						AuthorizationLimitEndTimeDay5 = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public decimal? AuthorizationLimitDay6 { get; set; }

			[IgnoreDataMember]
			public Nullable<DateTime> AuthorizationLimitStartTimeDay6 { get; set; }

			[DataMember(Name = "AuthorizationLimitStartTimeDay6")]
			public string AuthorizationLimitStartTimeDay6Str
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(AuthorizationLimitStartTimeDay6);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						AuthorizationLimitStartTimeDay6 = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public Nullable<DateTime> AuthorizationLimitEndTimeDay6 { get; set; }

			[DataMember(Name = "AuthorizationLimitEndTimeDay6")]
			public string AuthorizationLimitEndTimeDay6Str
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(AuthorizationLimitEndTimeDay6);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						AuthorizationLimitEndTimeDay6 = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public decimal? AuthorizationLimitDay7 { get; set; }

			[IgnoreDataMember]
			public Nullable<DateTime> AuthorizationLimitStartTimeDay7 { get; set; }

			[DataMember(Name = "AuthorizationLimitStartTimeDay7")]
			public string AuthorizationLimitStartTimeDay7Str
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(AuthorizationLimitStartTimeDay7);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						AuthorizationLimitStartTimeDay7 = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public Nullable<DateTime> AuthorizationLimitEndTimeDay7 { get; set; }

			[DataMember(Name = "AuthorizationLimitEndTimeDay7")]
			public string AuthorizationLimitEndTimeDay7Str
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(AuthorizationLimitEndTimeDay7);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						AuthorizationLimitEndTimeDay7 = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public String ContractID { get; set; }


	}
}
