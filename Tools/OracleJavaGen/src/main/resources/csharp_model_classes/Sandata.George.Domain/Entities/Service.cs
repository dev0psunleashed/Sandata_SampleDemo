//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.11.27 at 10:53:27 PM EST 
//


using Sandata.George.Common;
using Sandata.George.Common.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;





/**
 * Defines the various categories of services performed by the Business Entity
 * 
 * <p>Java class for Service complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Service">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{}Service_Task" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Schedule_Event_Service" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Service_Visit" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Schedule_Service" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Staff_Patient_Cross_Reference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Authorization_Service" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Service_Activity_Billing_Code" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Payer_Service_List" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Contract_Service_List" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Patient_Diagnosis" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Staff_Credential" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="Invoice_Detail" type="{}Invoice_Detail" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Accounts_Receivable" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Patient_Payer" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Plan_Of_Care_Service" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Staff" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}Claim_Line" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="Service_SK" use="required" type="{}Surrogate_Key" />
 *       &lt;attribute name="Record_Create_Timestamp" use="required" type="{}Record_Create_Timestamp" />
 *       &lt;attribute name="Record_Update_Timestamp" use="required" type="{}Record_Update_Timestamp" />
 *       &lt;attribute name="Record_Effective_Timestamp" use="required" type="{}Record_Effective_Timestamp" />
 *       &lt;attribute name="Record_Termination_Timestamp" use="required" type="{}Record_Termination_Timestamp" />
 *       &lt;attribute name="Record_Created_By" type="{}Record_Created_By" />
 *       &lt;attribute name="Record_Updated_By" type="{}Record_Updated_By" />
 *       &lt;attribute name="Change_Reason_Memo" type="{}Change_Reason_Memo" />
 *       &lt;attribute name="Current_Record_Indicator" use="required" type="{}Current_Record_Indicator" />
 *       &lt;attribute name="Change_Version_ID" use="required" type="{}Change_Version_ID" />
 *       &lt;attribute name="Business_Entity_ID" use="required" type="{}ID" />
 *       &lt;attribute name="Service_Name" type="{}Service_Name" />
 *       &lt;attribute name="Service_Description" type="{}Description_Short" />
 *       &lt;attribute name="Billing_Code" type="{}Billing_Code" />
 *       &lt;attribute name="Service_Effective_Date" type="{}Attribute_Effective_Date" />
 *       &lt;attribute name="Service_Termination_Date" type="{}Attribute_Termination_Date" />
 *       &lt;attribute name="Payer_ID" type="{}ID" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
namespace Sandata.George.Domain.Entities
{
	[DataContract]
	public class Service
	{

			[DataMember]
			public List<ServiceTask> ServiceTaskCollection { get; set; }

			[DataMember]
			public List<ScheduleEventService> ScheduleEventServiceCollection { get; set; }

			[DataMember]
			public List<ServiceVisit> ServiceVisitCollection { get; set; }

			[DataMember]
			public List<ScheduleService> ScheduleServiceCollection { get; set; }

			[DataMember]
			public List<StaffPatientCrossReference> StaffPatientCrossReferenceCollection { get; set; }

			[DataMember]
			public List<AuthorizationService> AuthorizationServiceCollection { get; set; }

			[DataMember]
			public List<ServiceActivityBillingCode> ServiceActivityBillingCodeCollection { get; set; }

			[DataMember]
			public List<PayerServiceList> PayerServiceListCollection { get; set; }

			[DataMember]
			public List<ContractServiceList> ContractServiceListCollection { get; set; }

			[DataMember]
			public List<PatientDiagnosis> PatientDiagnosisCollection { get; set; }

			[DataMember]
			public List<StaffCredential> StaffCredentialCollection { get; set; }

			[DataMember]
			public List<InvoiceDetail> InvoiceDetailCollection { get; set; }

			[DataMember]
			public List<AccountsReceivable> AccountsReceivableCollection { get; set; }

			[DataMember]
			public List<PatientPayer> PatientPayerCollection { get; set; }

			[DataMember]
			public List<PlanOfCareService> PlanOfCareServiceCollection { get; set; }

			[DataMember]
			public List<Staff> StaffCollection { get; set; }

			[DataMember]
			public List<ClaimLine> ClaimLineCollection { get; set; }

			[DataMember(IsRequired = true)]
			public long ServiceSK { get; set; }

			[IgnoreDataMember]
			public DateTime RecordCreateTimestamp { get; set; }

			[DataMember(Name = "RecordCreateTimestamp", IsRequired = true)]
			public string RecordCreateTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordCreateTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordCreateTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public DateTime RecordUpdateTimestamp { get; set; }

			[DataMember(Name = "RecordUpdateTimestamp", IsRequired = true)]
			public string RecordUpdateTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordUpdateTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordUpdateTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public DateTime RecordEffectiveTimestamp { get; set; }

			[DataMember(Name = "RecordEffectiveTimestamp", IsRequired = true)]
			public string RecordEffectiveTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordEffectiveTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordEffectiveTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public DateTime RecordTerminationTimestamp { get; set; }

			[DataMember(Name = "RecordTerminationTimestamp", IsRequired = true)]
			public string RecordTerminationTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordTerminationTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordTerminationTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public String RecordCreatedBy { get; set; }

			[DataMember]
			public String RecordUpdatedBy { get; set; }

			[DataMember]
			public String ChangeReasonMemo { get; set; }

			[DataMember(IsRequired = true)]
			public bool CurrentRecordIndicator { get; set; }

			[DataMember(IsRequired = true)]
			public long ChangeVersionID { get; set; }

			[DataMember(IsRequired = true)]
			public String BusinessEntityID { get; set; }

			[DataMember]
			public ServiceName ServiceName { get; set; }

			[DataMember]
			public String ServiceDescription { get; set; }

			[DataMember]
			public String BillingCode { get; set; }

			[IgnoreDataMember]
			public Nullable<DateTime> ServiceEffectiveDate { get; set; }

			[DataMember(Name = "ServiceEffectiveDate")]
			public string ServiceEffectiveDateStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(ServiceEffectiveDate);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						ServiceEffectiveDate = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public Nullable<DateTime> ServiceTerminationDate { get; set; }

			[DataMember(Name = "ServiceTerminationDate")]
			public string ServiceTerminationDateStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(ServiceTerminationDate);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						ServiceTerminationDate = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public String PayerID { get; set; }


	}
}
