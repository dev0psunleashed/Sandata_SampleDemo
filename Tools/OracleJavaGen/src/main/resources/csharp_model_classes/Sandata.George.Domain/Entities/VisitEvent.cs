//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.11.27 at 10:53:27 PM EST 
//


using Sandata.George.Common;
using Sandata.George.Common.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;





/**
 * <p>Java class for Visit_Event complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Visit_Event">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;attribute name="Visit_Event_SK" use="required" type="{}Surrogate_Key" />
 *       &lt;attribute name="Visit_SK" type="{}Surrogate_Key" />
 *       &lt;attribute name="Record_Create_Timestamp" use="required" type="{}Record_Create_Timestamp" />
 *       &lt;attribute name="Record_Update_Timestamp" use="required" type="{}Record_Update_Timestamp" />
 *       &lt;attribute name="Record_Effective_Timestamp" use="required" type="{}Record_Effective_Timestamp" />
 *       &lt;attribute name="Record_Termination_Timestamp" use="required" type="{}Record_Termination_Timestamp" />
 *       &lt;attribute name="Record_Created_By" type="{}Record_Created_By" />
 *       &lt;attribute name="Record_Updated_By" type="{}Record_Updated_By" />
 *       &lt;attribute name="Change_Reason_Memo" type="{}Change_Reason_Memo" />
 *       &lt;attribute name="Current_Record_Indicator" use="required" type="{}Current_Record_Indicator" />
 *       &lt;attribute name="Change_Version_ID" use="required" type="{}Change_Version_ID" />
 *       &lt;attribute name="Visit_Event_Type_Code" use="required" type="{}Visit_Event_Type_Code" />
 *       &lt;attribute name="Visit_Event_Datetime" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *       &lt;attribute name="Timezone_Name" type="{}Timezone_Name" />
 *       &lt;attribute name="Automatic_Number_Identification" type="{}Automatic_Number_Identification" />
 *       &lt;attribute name="Information_Digits" type="{}Information_Digits" />
 *       &lt;attribute name="Dialed_Number_Identification_Service" type="{}Dialed_Number_Identification_Service" />
 *       &lt;attribute name="Equipment_ID" type="{}ID" />
 *       &lt;attribute name="Staff_ID" type="{}ID" />
 *       &lt;attribute name="Patient_ID" type="{}ID" />
 *       &lt;attribute name="Coordinate_Latitude" type="{}Coordinate_Latitude" />
 *       &lt;attribute name="Coordinate_Longitide" type="{}Coordinate_Longitide" />
 *       &lt;attribute name="Coordinate_Accuracy" type="{}Coordinate_Accuracy" />
 *       &lt;attribute name="Coordinate_Altitude" type="{}Coordinate_Altitude" />
 *       &lt;attribute name="Coordinate_Altitude_Accuracy" type="{}Coordinate_Altitude_Accuracy" />
 *       &lt;attribute name="Coordinate_Heading" type="{}Coordinate_Heading" />
 *       &lt;attribute name="Coordinate_Speed" type="{}Coordinate_Speed" />
 *       &lt;attribute name="Coordinate_Timestamp" type="{}Coordinate_Timestamp" />
 *       &lt;attribute name="International_Mobile_Station_Equipment_Identity" type="{}International_Mobile_Station_Equipment_Identity" />
 *       &lt;attribute name="Call_In_Indicator" type="{}Indicator" />
 *       &lt;attribute name="Call_Out_Indicator" type="{}Indicator" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
namespace Sandata.George.Domain.Entities
{
	[DataContract]
	public class VisitEvent
	{

			[DataMember(IsRequired = true)]
			public long VisitEventSK { get; set; }

			[DataMember]
			public long? VisitSK { get; set; }

			[IgnoreDataMember]
			public DateTime RecordCreateTimestamp { get; set; }

			[DataMember(Name = "RecordCreateTimestamp", IsRequired = true)]
			public string RecordCreateTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordCreateTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordCreateTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public DateTime RecordUpdateTimestamp { get; set; }

			[DataMember(Name = "RecordUpdateTimestamp", IsRequired = true)]
			public string RecordUpdateTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordUpdateTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordUpdateTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public DateTime RecordEffectiveTimestamp { get; set; }

			[DataMember(Name = "RecordEffectiveTimestamp", IsRequired = true)]
			public string RecordEffectiveTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordEffectiveTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordEffectiveTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public DateTime RecordTerminationTimestamp { get; set; }

			[DataMember(Name = "RecordTerminationTimestamp", IsRequired = true)]
			public string RecordTerminationTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordTerminationTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordTerminationTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public String RecordCreatedBy { get; set; }

			[DataMember]
			public String RecordUpdatedBy { get; set; }

			[DataMember]
			public String ChangeReasonMemo { get; set; }

			[DataMember(IsRequired = true)]
			public bool CurrentRecordIndicator { get; set; }

			[DataMember(IsRequired = true)]
			public long ChangeVersionID { get; set; }

			[DataMember(IsRequired = true)]
			public VisitEventTypeCode VisitEventTypeCode { get; set; }

			[IgnoreDataMember]
			public Nullable<DateTime> VisitEventDatetime { get; set; }

			[DataMember(Name = "VisitEventDatetime")]
			public string VisitEventDatetimeStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(VisitEventDatetime);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						VisitEventDatetime = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public String TimezoneName { get; set; }

			[DataMember]
			public String AutomaticNumberIdentification { get; set; }

			[DataMember]
			public String InformationDigits { get; set; }

			[DataMember]
			public String DialedNumberIdentificationService { get; set; }

			[DataMember]
			public String EquipmentID { get; set; }

			[DataMember]
			public String StaffID { get; set; }

			[DataMember]
			public String PatientID { get; set; }

			[DataMember]
			public decimal? CoordinateLatitude { get; set; }

			[DataMember]
			public decimal? CoordinateLongitide { get; set; }

			[DataMember]
			public decimal? CoordinateAccuracy { get; set; }

			[DataMember]
			public decimal? CoordinateAltitude { get; set; }

			[DataMember]
			public decimal? CoordinateAltitudeAccuracy { get; set; }

			[DataMember]
			public Double CoordinateHeading { get; set; }

			[DataMember]
			public Double CoordinateSpeed { get; set; }

			[IgnoreDataMember]
			public Nullable<DateTime> CoordinateTimestamp { get; set; }

			[DataMember(Name = "CoordinateTimestamp")]
			public string CoordinateTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(CoordinateTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						CoordinateTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public String InternationalMobileStationEquipmentIdentity { get; set; }

			[DataMember]
			public bool? CallInIndicator { get; set; }

			[DataMember]
			public bool? CallOutIndicator { get; set; }


	}
}
