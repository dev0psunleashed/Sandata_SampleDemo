//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.11.27 at 10:53:27 PM EST 
//


using Sandata.George.Common;
using Sandata.George.Common.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;





/**
 * An invoice is the highest level of a billing component.  
 * An invoice consists of one or more invoice detail lines, they are used to identify the individual billable line items for a given period of time, and is also used to generate billing statements for patients.
 * List services provided, with a statement of the sum due for these services (a bill)
 * 
 * <p>Java class for Accounts_Receivable_Transaction_Batch_Detail complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Accounts_Receivable_Transaction_Batch_Detail">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{}Accounts_Receivable" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="Accounts_Receivable_Transaction_Batch_Detail_SK" use="required" type="{}Surrogate_Key" />
 *       &lt;attribute name="Record_Create_Timestamp" use="required" type="{}Record_Create_Timestamp" />
 *       &lt;attribute name="Record_Update_Timestamp" use="required" type="{}Record_Update_Timestamp" />
 *       &lt;attribute name="Record_Created_By" type="{}Record_Created_By" />
 *       &lt;attribute name="Record_Updated_By" type="{}Record_Updated_By" />
 *       &lt;attribute name="Change_Reason_Code" type="{}Change_Reason_Code" />
 *       &lt;attribute name="Change_Reason_Memo" type="{}Change_Reason_Memo" />
 *       &lt;attribute name="Change_Version_ID" use="required" type="{}Change_Version_ID" />
 *       &lt;attribute name="Business_Entity_ID" use="required" type="{}ID" />
 *       &lt;attribute name="Accounts_Receivable_Transaction_Batch_ID" use="required" type="{}ID" />
 *       &lt;attribute name="Payer_ID" type="{}ID" />
 *       &lt;attribute name="Invoice_Number" type="{}ID" />
 *       &lt;attribute name="Check_Date" type="{http://www.w3.org/2001/XMLSchema}date" />
 *       &lt;attribute name="Check_Deposit_Date" type="{http://www.w3.org/2001/XMLSchema}date" />
 *       &lt;attribute name="Check_Received_Date" type="{http://www.w3.org/2001/XMLSchema}date" />
 *       &lt;attribute name="Payment_Type_Qualifier" type="{}Payment_Type_Qualifier" />
 *       &lt;attribute name="Payment_Type_Number" type="{}ID" />
 *       &lt;attribute name="Payment_Amount" type="{}Money" />
 *       &lt;attribute name="Accounts_Receivable_Note_Type_Code" type="{}Name_Generic" />
 *       &lt;attribute name="Accounts_Receivable_Transaction_Note" type="{}Comment_Long" />
 *       &lt;attribute name="Accounts_Receivable_Transaction_Batch_Post_Indicator" type="{}Indicator" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
namespace Sandata.George.Domain.Entities
{
	[DataContract]
	public class AccountsReceivableTransactionBatchDetail
	{

			[DataMember]
			public List<AccountsReceivable> AccountsReceivablePropertyCollection { get; set; }

			[DataMember(IsRequired = true)]
			public long AccountsReceivableTransactionBatchDetailSK { get; set; }

			[IgnoreDataMember]
			public DateTime RecordCreateTimestamp { get; set; }

			[DataMember(Name = "RecordCreateTimestamp", IsRequired = true)]
			public string RecordCreateTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordCreateTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordCreateTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public DateTime RecordUpdateTimestamp { get; set; }

			[DataMember(Name = "RecordUpdateTimestamp", IsRequired = true)]
			public string RecordUpdateTimestampStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(RecordUpdateTimestamp);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						RecordUpdateTimestamp = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public String RecordCreatedBy { get; set; }

			[DataMember]
			public String RecordUpdatedBy { get; set; }

			[DataMember]
			public String ChangeReasonCode { get; set; }

			[DataMember]
			public String ChangeReasonMemo { get; set; }

			[DataMember(IsRequired = true)]
			public long ChangeVersionID { get; set; }

			[DataMember(IsRequired = true)]
			public String BusinessEntityID { get; set; }

			[DataMember(IsRequired = true)]
			public String AccountsReceivableTransactionBatchID { get; set; }

			[DataMember]
			public String PayerID { get; set; }

			[DataMember]
			public String InvoiceNumber { get; set; }

			[IgnoreDataMember]
			public Nullable<DateTime> CheckDate { get; set; }

			[DataMember(Name = "CheckDate")]
			public string CheckDateStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(CheckDate);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						CheckDate = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public Nullable<DateTime> CheckDepositDate { get; set; }

			[DataMember(Name = "CheckDepositDate")]
			public string CheckDepositDateStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(CheckDepositDate);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						CheckDepositDate = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[IgnoreDataMember]
			public Nullable<DateTime> CheckReceivedDate { get; set; }

			[DataMember(Name = "CheckReceivedDate")]
			public string CheckReceivedDateStr
			{
				get
				{
					return DateTimeHelper.ToDateTimeString(CheckReceivedDate);
				}
				set
				{
					if (!String.IsNullOrEmpty(value))
					{
						CheckReceivedDate = DateTimeHelper.ToDateTime(value);
					}
				}
			}

			[DataMember]
			public PaymentTypeQualifier PaymentTypeQualifier { get; set; }

			[DataMember]
			public String PaymentTypeNumber { get; set; }

			[DataMember]
			public decimal? PaymentAmount { get; set; }

			[DataMember]
			public String AccountsReceivableNoteTypeCode { get; set; }

			[DataMember]
			public String AccountsReceivableTransactionNote { get; set; }

			[DataMember]
			public bool? AccountsReceivableTransactionBatchPostIndicator { get; set; }


	}
}
