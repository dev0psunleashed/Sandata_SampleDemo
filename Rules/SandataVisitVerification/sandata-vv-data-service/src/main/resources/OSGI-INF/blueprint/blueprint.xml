<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:camel="http://camel.apache.org/schema/blueprint"
           xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.2.0"
           xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
           xsi:schemaLocation="
                http://www.osgi.org/xmlns/blueprint/v1.0.0
                http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
                http://camel.apache.org/schema/blueprint
                http://camel.apache.org/schema/blueprint/camel-blueprint.xsd
                http://cxf.apache.org/blueprint/jaxrs
                http://cxf.apache.org/schemas/blueprint/jaxrs.xsd">

    <cm:property-placeholder id="visit.verification.data.service.blueprint.placeholder"
                             persistent-id="com.sandata.lab.rules.data.service.vv"
                             update-strategy="reload">
        <cm:default-properties>
            <cm:property name="activeMQ.uri" value="tcp://localhost:61616"/>
            <cm:property name="activeMQ.username" value="admin"/>
            <cm:property name="activeMQ.password" value="admin"/>
            <cm:property name="activeMQ.concurrentConsumers" value="100"/>
            <cm:property name="thread.pool.size" value="20" />
            <cm:property name="thread.pool.max.size" value="100" />
            <cm:property name="thread.pool.max.queue.size" value="-1" />
            <cm:property name="webservice.url" value="/data/service/vv" />
            <cm:property name="schedule.start.threshold.visit.exceptions" value="60000" />
            <cm:property name="exchange.exception.redelivery.delay" value="10000"/>
            <cm:property name="exchange.exception.maximum.redeliveries" value="0"/>
            <cm:property name="visit.event.aggregation.time" value="30000"/>
            <cm:property name="visit.gps.distance.threshold.miles" value="0.5"/>
            <cm:property name="vv.data.service.cache.mapdb.path" value="target/data/mapdb/vv-dataserice" />
            <cm:property name="storeExpireSeconds" value="600" />
        </cm:default-properties>
    </cm:property-placeholder>

    <bean id="traceFormatter" class="org.apache.camel.processor.interceptor.DefaultTraceFormatter">
        <property name="showBody" value="false"/>
        <property name="showHeaders" value="false"/>
    </bean>

    <bean id="visitVerificationDataService" class="com.sandata.lab.rules.data.service.impl.VisitVerificationDataService"
          depends-on="visitVerificationDataServiceContext" activation="eager">
        <property name="connectionPoolDataService">
            <reference
                    interface="com.sandata.lab.dl.db.pool.api.ConnectionPoolDataService"
                    availability="mandatory"/>
        </property>
    </bean>
    
     <bean id="visitVerificationExceptionDataService" class="com.sandata.lab.rules.data.service.impl.VisitVerificationExceptionDataService"
          depends-on="visitVerificationDataServiceContext" activation="eager">
        <property name="connectionPoolDataService">
            <reference
                    interface="com.sandata.lab.dl.db.pool.api.ConnectionPoolDataService"
                    availability="mandatory"/>
        </property>
    </bean>

    <bean id="formatTransformer" class="com.sandata.lab.common.utils.data.transformer.FormatTransformer" depends-on="visitVerificationDataServiceContext" />

    <bean id="authenticationInterceptor" class="org.apache.cxf.jaxrs.security.JAASAuthenticationFilter">
        <property name="contextName" value="karaf"/>
    </bean>

    <!-- Redis Template -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" depends-on="visitVerificationDataServiceContext" init-method="afterPropertiesSet">
        <property name="connectionFactory">
            <reference
                    interface="com.sandata.lab.redis.connection.SandataRedisConnectionFactory"
                    availability="mandatory" />
        </property>
    </bean>

    <!--Sandata Redis Cache Service-->
    <bean id="sandataRedisCacheService" class="com.sandata.lab.redis.services.impl.SandataRedisCacheService" depends-on="redisTemplate">
        <argument value="CallMatchingService"/>
        <argument value="600"/>
        <argument ref="redisTemplate"/>
    </bean> 

    <bean id="vvDataServicegRedisStore" class="com.sandata.lab.rules.data.service.cache.redis.VVDataServiceRedisStore" depends-on="sandataRedisCacheService">
        <property name="sandataRedisService" ref="sandataRedisCacheService"/>
    </bean>

    <bean id="visitVerificationCacheHandler" class="com.sandata.lab.rules.data.service.cache.VisitVerificationCacheHandler" depends-on="vvDataServicegRedisStore">
         <property name="vvDataServiceStore" ref="vvDataServicegRedisStore" />
        <!--<property name="vvDataServiceStore" ref="mapDBCacheProxy" />-->
    </bean>
    
    <!--<bean id="mapDBCacheHandler" class="com.sandata.lab.rules.data.service.cache.mapdb.MapDBCacheHandler" />-->
    <!--&lt;!&ndash; memory cache &ndash;&gt;-->
    <!--<bean id="mapDBCacheProxy" class="com.sandata.lab.rules.data.service.cache.mapdb.MapDBCacheProxy" >-->
        <!--<property name="mapDBCacheHandler" ref="mapDBCacheHandler" />-->
    <!--</bean>-->
    


    <bean id="gsonProvider" class="com.sandata.lab.common.utils.data.provider.GSONProvider"/>

    <!-- connect to the local ActiveMQ broker -->
    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="brokerURL" value="${activeMQ.uri}"/>
        <property name="userName" value="${activeMQ.username}"/>
        <property name="password" value="${activeMQ.password}"/>
        <property name="concurrentConsumers" value="${activeMQ.concurrentConsumers}"/>
    </bean>

    <cxf:rsServer id="rsServer" address="${webservice.url}"
                  serviceClass="com.sandata.lab.rules.data.service.RestfulServices"
                  loggingFeatureEnabled="true"
                  loggingSizeLimit="20">
        <cxf:providers>
            <ref component-id="authenticationInterceptor"/>
            <ref component-id="gsonProvider" />
        </cxf:providers>
    </cxf:rsServer>

    <camelContext id="visitVerificationDataServiceContext" trace="true" streamCache="true"
                  useBlueprintPropertyResolver="true" xmlns="http://camel.apache.org/schema/blueprint">
        <!-- using Camel properties component and refer to the OSGI-INF.blueprint property placeholder by its id -->
        <!-- http://camel.apache.org/properties.html : inside camelContext {{}} : outside camelContext ${} -->
        <!-- <propertyPlaceholder id="properties" location="OSGI-INF.blueprint:dhs.OSGI-INF.blueprint.placeholder"/>-->
        <propertyPlaceholder id="properties"
                             location="blueprint:visit.verification.data.service.blueprint.placeholder"/>
        <package>com.sandata.lab.rules.data.service.routes</package>
        <threadPoolProfile id="sandataVvDataServiceThreadPool" poolSize="{{thread.pool.size}}" maxPoolSize="{{thread.pool.max.size}}" maxQueueSize="{{thread.pool.max.queue.size}}"/>
    </camelContext>
</blueprint>
