<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
       xmlns:camel="http://camel.apache.org/schema/blueprint"
       xsi:schemaLocation="
       http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
       http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd
       http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd">

  <bean id="appContext" class="com.sandata.lab.rules.call.matching.app.AppContext"
        factory-method="initCamelContext" depends-on="cep-engine-visit-transformer-camel-context">
    <argument ref="cep-engine-visit-transformer-camel-context" />
  </bean>

  <cm:property-placeholder id="cep-engine.blueprint.placeholder" persistent-id="com.sandata.lab.rules" update-strategy="none">
    <cm:default-properties>
      <cm:property name="activeMQ.uri" value="tcp://localhost:61616" />
      <cm:property name="activeMQ.username" value="admin" />
      <cm:property name="activeMQ.password" value="admin" />
      <cm:property name="activeMQ.concurrentConsumers" value="100" />
    </cm:default-properties>
  </cm:property-placeholder>
  <!-- connect to the local ActiveMQ broker -->
  <bean id="connectionFactory" class="org.apache.activemq.spring.ActiveMQConnectionFactory">
    <property name="brokerURL" value="${activeMQ.uri}" />
    <property name="userName" value="${activeMQ.username}" />
    <property name="password" value="${activeMQ.password}" />
  </bean>
  <bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
    <property name="connectionFactory" ref="connectionFactory"/>
  </bean>
  <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent" depends-on="jmsConfig">
    <property name="concurrentConsumers" value="${activeMQ.concurrentConsumers}"/>
    <property name="configuration" ref="jmsConfig"/>
  </bean>
  <reference id="callPreferencesSvc"
             interface="com.sandata.lab.rules.cache.service.ICallPreferencesSvc" />
  <bean id="client" class="com.sandata.lab.rules.cache.client.CacheClient"
    init-method="startUp" >
    <property name="callPreferencesSvc" ref="callPreferencesSvc"/>
  </bean>
<bean id="callValidator" class="com.sandata.lab.rules.call.matching.transform.FactValidator"/>
<bean id="callFactConvert" class="com.sandata.lab.rules.call.matching.transform.CallFactConverter"/>
<bean id="toVisitEventConvert" class="com.sandata.lab.rules.call.matching.transform.VisitEventConverter"/>
<bean id="processDnisGroup" class="com.sandata.lab.rules.call.matching.processor.ValidBusinessEntity" />



  <camel:camelContext id="cep-engine-visit-transformer-camel-context" useBlueprintPropertyResolver="true" >
  <camel:propertyPlaceholder id="properties" location="blueprint:cep-engine.blueprint.placeholder" />
  <camel:route id="processCalls" >
    <camel:from uri="activemq:queue:PROCESS_CALLS"/>
    <camel:log message="New grp with dnis of ${body.dnis}" />
    <camel:process ref="processDnisGroup" />
    <camel:choice>
      <camel:when>
        <camel:simple>${headers.VALID_DNIS} == 'false'</camel:simple>
        <camel:split parallelProcessing="false">
          <camel:simple>${body.visitEvents}</camel:simple>
          <camel:log message="Grp with dnis of ${body.dialedNumberIdentificationService} split and return as invalid DNIS!!" />
          <camel:to uri="activemq:queue:PROCESSED_CALLS"/>
        </camel:split><camel:stop/>
      </camel:when>
      <camel:when>
        <camel:simple>${headers.VALID_DNIS} == 'true'</camel:simple>
        <camel:split parallelProcessing="false">
          <camel:simple>${body.visitEvents}</camel:simple>
          <camel:log message="Grp with dnis of ${body.dialedNumberIdentificationService} split into ani of ${body.automaticNumberIdentification} and sent as valid DNIS" />
          <camel:process ref="callFactConvert" />
          <camel:to uri="activemq:queue:CEP_ENGINE_CALLS"/>
        </camel:split>
      </camel:when>
    </camel:choice>
  </camel:route>
  <camel:route id="processRetractedCalls" >
    <camel:from uri="activemq:queue:RETRACTED_CALLS" />
    <camel:process ref="toVisitEventConvert"/>
    <camel:to uri="activemq:queue:PROCESSED_CALLS"/>
  </camel:route>
  <camel:route id="writeSampleJson" >
    <camel:from uri="direct:callImportSamples" />
    <camel:to uri="file://target/CallMatching/importCalls/.holding" />
  </camel:route>
</camel:camelContext>

</blueprint>
