package com.sandata.lab.rules.schedules;

import com.sandata.lab.rules.call.model.VisitFact;
import com.sandata.lab.rules.call.model.State;
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.lang.Long;

function long diffDates2(Date d1, Date d2) {
    if(d1.after(d2)) {
        return d1.getTime() - d2.getTime();
    }
    else
    {
        return d2.getTime() - d1.getTime();
    }
}


declare Threshold
    value : Long @key
end



rule "cep-engine-schedule-20 new agenda-group"
    salience 90
    agenda-group "closest-schedule"
    when
        eval(true)
    then

end

rule "cep-engine-schedule-20 find closest match by threshold from"
    salience 85
    agenda-group "closest-schedule"
    when
        $threshold : Threshold()
        $inserted : VisitFact(state == State.AGG_WAITING_FOR_RESPONSE)
        $scheduled : VisitFact(state == State.CONTENDER_FROM,
        diffDates2(scheduledFrom, $inserted.getCallIn()) < $threshold.getValue())
    then
        $threshold.setValue(Long.valueOf(diffDates2($scheduled.getScheduledFrom(), $inserted.getCallIn())));
        update($threshold);
        update($scheduled);

    LoggerFactory.getLogger("RulesCallMatching").info("Set Threshold -> from and recalculate");

end

rule "cep-engine-schedule-20 find closest match by threshold to"
    salience 85
    agenda-group "closest-schedule"
    when
        $threshold : Threshold()
        $inserted : VisitFact(state == State.AGG_WAITING_FOR_RESPONSE)
        $scheduled : VisitFact(state == State.CONTENDER_TO,
        diffDates2(scheduledTo, $inserted.getCallIn()) < $threshold.getValue())
    then
        $threshold.setValue(Long.valueOf(diffDates2($scheduled.getScheduledTo(), $inserted.getCallIn())));
        update($threshold);
        update($scheduled);

    LoggerFactory.getLogger("RulesCallMatching").info("Set Threshold -> to and recalculate");

end

rule "cep-engine-schedule-10 reduce contenders from"
    salience 85
    agenda-group "closest-schedule"
    when
        $threshold : Long()
        $inserted : VisitFact(state == State.AGG_WAITING_FOR_RESPONSE)
        $scheduled : VisitFact(state == State.CONTENDER_FROM, diffDates2(scheduledFrom, $inserted.getCallIn()) > $threshold)
    then
        retract($scheduled);
        LoggerFactory.getLogger("RulesCallMatching").info("From Contender retracted");
end

rule "cep-engine-schedule-10 reduce contenders to"
    salience 85
    agenda-group "closest-schedule"
    when
        $threshold : Threshold()
        $inserted : VisitFact(state == State.AGG_WAITING_FOR_RESPONSE)
        $scheduled : VisitFact(state == State.CONTENDER_TO, diffDates2(scheduledTo, $inserted.getCallIn()) > $threshold.getValue())
    then
        retract($scheduled);
        LoggerFactory.getLogger("RulesCallMatching").info("To Contender retracted");
end

rule "cep-engine-schedule-10 split decision pick contender"
    salience 85
    agenda-group "closest-schedule"
    when
        $inserted : VisitFact(state == State.AGG_WAITING_FOR_RESPONSE)
        $schedule1 : VisitFact(state == State.CONTENDER_FROM)
        $schedule2 : VisitFact(state == State.CONTENDER_TO, diffDates2(scheduledTo, $inserted.getCallIn()) == diffDates2($schedule1.getScheduledFrom(), $inserted.getCallIn()))
    then
        retract($schedule2);
end

rule "cep-engine-schedule-20 found closest match by threshold from"
    salience 80
    agenda-group "closest-schedule"
    when
        $threshold : Threshold()
        $inserted : VisitFact(state == State.AGG_WAITING_FOR_RESPONSE)
        $scheduled : VisitFact(state == State.CONTENDER_FROM,
        diffDates2(scheduledFrom, $inserted.getCallIn()) == $threshold.getValue())
    then
        $inserted.setState(State.MATCHED);
        $scheduled.setState(State.MATCHED);
        $scheduled.setCallCallIn($inserted.getCallCallIn());
        $scheduled.addTaskList($inserted.getTaskList());
        retract($threshold);
        retract($inserted);
        update($scheduled);
        LoggerFactory.getLogger("RulesCallMatching").info("Set Threshold -> from and recalculate");
end

rule "cep-engine-schedule-20 found closest match by threshold to"
    salience 80
    agenda-group "closest-schedule"
    when
        $threshold : Threshold()
        $inserted : VisitFact(state == State.AGG_WAITING_FOR_RESPONSE)
        $scheduled : VisitFact(state == State.CONTENDER_TO,
        diffDates2(scheduledTo, $inserted.getCallIn()) == $threshold.getValue())
    then
        $inserted.setState(State.MATCHED);
        $scheduled.setState(State.MATCHED);
        $scheduled.setCallCallOut($inserted.getCallCallIn());
        $scheduled.addTaskList($inserted.getTaskList());
        retract($inserted);
        retract($threshold);
        update($scheduled);
        LoggerFactory.getLogger("RulesCallMatching").info("Set Threshold -> to and recalculate");
end

